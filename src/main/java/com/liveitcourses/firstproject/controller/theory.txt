1. Difference between @PathVariable and @RequestParam in Spring
Now that we understand both the difference as well as how to use both @RequestParam and @PathVariable in the Spring MVC application, let's revise the critical difference between them from an interview perspective.

1) The @RequestParam is used to extract query parameters while @PathVariable is used to extract data right from the URI.

2) @RequestParam is more useful on a traditional web application where data is mostly passed in the query statements while @PathVariable is more suitable for RESTful web services where URL contains values, like http://localhost:8080/book/9783827319333, here data, which is ISBN number is part of URI.

3) @RequestParam annotation can specify default values if a query parameter is not present or empty by using a defaultValue attribute, provided the required attribute is false.

4) Spring MVC allows you to use multiple @PathVariable annotations in the same method, provided, no more than one argument has the same pattern.

=====================================================================================================================================

2. HATEOS

The Spring HATEOAS project is a library of APIs that we can use to easily create REST representations that follow the principle of HATEOAS
(Hypertext as the Engine of Application State).

Generally speaking, the principle implies that the API should guide the client through the application by returning relevant information about
 the next potential steps, along with each response.


 3. VALIDATION

 a. Add spring boot starter validation dep. inside build.gradle. Load the gradle changes.
 b. Open the object class eg User in our and put some validation on the required fields.
 c. Integrate object level validations within our controller classes.
 d. Override handleMethodArgumentNotValid() and return your exception class response along with getBindingResults().toString.


4. Swagger implementation

For providing documentation for our apis.

OpenAPI is a specification and Swagger provides tools for implementing that specification.

http://localhost:8080/swagger-ui/index.html

5. Actuator
Spring Boot Actuator is a sub-project of the Spring Boot Framework. It uses HTTP endpoints to expose operational information
 about any running application. The main benefit of using this library is that we get health and monitoring metrics from
 production-ready applications. Auditing, health, and metrics gathering can also be automatically applied to your application.

http://localhost:8080/actuator

management.endpoints.web.exposure.include=*